package com.ijiagoushi.chillies.http.easy;

import com.ijiagoushi.chillies.http.HttpHeaders;
import com.ijiagoushi.chillies.http.HttpOptions;
import com.ijiagoushi.chillies.json.TypeRef;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.nio.charset.Charset;
import java.util.Map;

/**
 * HTTP的工具类，提供了一些便捷的工具方法，更丰富的工具方法可使用其他工具类
 *
 * @author miles.tang at 2021-02-08
 * @see GetHttpUtil
 * @see BinaryHttpUtil
 * @see FormDataHttpUtil
 * @see HtmlBodyHttpUtil
 * @see JsBodyHttpUtil
 * @see JsonBodyHttpUtil
 * @see TextBodyHttpUtil
 * @see XmlBodyHttpUtil
 * @since 1.0
 */
@Deprecated
public class HttpUtil {


    // region Http Get Method

    public static String get(@NotNull String url) {
        return get(url, (Map<String, ?>) null);
    }

    public static String get(@NotNull String url, @Nullable Map<String, ?> queryParams) {
        return get(url, queryParams, (HttpHeaders) null);
    }

    public static String get(@NotNull String url, @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers) {
        return get(url, queryParams, headers, (HttpOptions) null);
    }

    public static String get(@NotNull String url, @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                             @Nullable HttpOptions options) {
        return GetHttpUtil.execute(url, queryParams, headers, (Charset) null, options);
    }

    public static <T> T get(String url, Class<T> clazz) {
        return get(url, null, clazz);
    }

    public static <T> T get(String url, @Nullable Map<String, ?> queryParams, @NotNull Class<T> clazz) {
        return get(url, queryParams, null, clazz);
    }

    public static <T> T get(@NotNull String url, @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                            @NotNull Class<T> clazz) {
        return get(url, queryParams, headers, null, clazz);
    }

    public static <T> T get(@NotNull String url, @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                            @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return GetHttpUtil.execute(url, queryParams, headers, null, options, clazz);
    }

    public static <T> T get(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return get(url, null, typeRef);
    }

    public static <T> T get(@NotNull String url, @Nullable Map<String, ?> queryParams, @NotNull TypeRef<T> typeRef) {
        return get(url, queryParams, null, typeRef);
    }

    public static <T> T get(@NotNull String url, @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                            @NotNull TypeRef<T> typeRef) {
        return get(url, queryParams, headers, null, typeRef);
    }

    public static <T> T get(@NotNull String url, @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                            @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return GetHttpUtil.execute(url, queryParams, headers, null, options, typeRef);
    }

    // endregion


    // region x-www-form-urlencoded/form-data

    public static String post(@NotNull String url) {
        return post(url, (Map<String, ?>) null);
    }

    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams) {
        return post(url, postParams, (Map<String, ?>) null);
    }

    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams) {
        return post(url, postParams, queryParams, (HttpHeaders) null);
    }

    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                              @Nullable HttpHeaders headers) {
        return post(url, postParams, queryParams, headers, (HttpOptions) null);
    }

    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                              @Nullable HttpHeaders headers, @Nullable HttpOptions options) {
        return FormDataHttpUtil.post(url, postParams, queryParams, headers, options);
    }

    public static <T> T post(@NotNull String url, @NotNull Class<T> clazz) {
        return post(url, null, clazz);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @NotNull Class<T> clazz) {
        return post(url, postParams, null, clazz);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, null, clazz);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, headers, null, clazz);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return FormDataHttpUtil.post(url, postParams, queryParams, headers, options, clazz);
    }

    public static <T> T post(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return post(url, null, typeRef);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, null, typeRef);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, null, typeRef);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, headers, null, typeRef);
    }

    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return FormDataHttpUtil.post(url, postParams, queryParams, headers, options, typeRef);
    }

    // endregion


    // region Http Text Raw Body Method

    public static String textBody(@NotNull String url) {
        return textBody(url, (Object) null);
    }

    public static String textBody(@NotNull String url, @Nullable Object body) {
        return textBody(url, body, (Map<String, ?>) null);
    }

    public static String textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams) {
        return textBody(url, body, queryParams, (HttpHeaders) null);
    }

    public static String textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                  @Nullable HttpHeaders headers) {
        return textBody(url, body, queryParams, headers, (HttpOptions) null);
    }

    public static String textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                  @Nullable HttpHeaders headers, HttpOptions options) {
        return TextBodyHttpUtil.execute(url, body, queryParams, headers, options);
    }


    public static <T> T textBody(@NotNull String url, @NotNull Class<T> clazz) {
        return textBody(url, null, clazz);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @NotNull Class<T> clazz) {
        return textBody(url, body, null, clazz);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @NotNull Class<T> clazz) {
        return textBody(url, body, queryParams, null, clazz);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return textBody(url, body, queryParams, headers, null, clazz);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return TextBodyHttpUtil.execute(url, body, queryParams, headers, options, clazz);
    }


    public static <T> T textBody(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return textBody(url, null, typeRef);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @NotNull TypeRef<T> typeRef) {
        return textBody(url, body, null, typeRef);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @NotNull TypeRef<T> typeRef) {
        return textBody(url, body, queryParams, null, typeRef);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return textBody(url, body, queryParams, headers, null, typeRef);
    }

    public static <T> T textBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return TextBodyHttpUtil.execute(url, body, queryParams, headers, options, typeRef);
    }

    // endregion


    // region Http JSON Raw Body Method

    public static String jsonBody(@NotNull String url) {
        return jsonBody(url, (Object) null);
    }

    public static String jsonBody(@NotNull String url, @Nullable Object body) {
        return jsonBody(url, body, (Map<String, ?>) null);
    }

    public static String jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams) {
        return jsonBody(url, body, queryParams, (HttpHeaders) null);
    }

    public static String jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                  @Nullable HttpHeaders headers) {
        return jsonBody(url, body, queryParams, headers, (HttpOptions) null);
    }

    public static String jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                  @Nullable HttpHeaders headers, HttpOptions options) {
        return JsonBodyHttpUtil.execute(url, body, queryParams, headers, options);
    }


    public static <T> T jsonBody(@NotNull String url, @NotNull Class<T> clazz) {
        return jsonBody(url, null, clazz);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @NotNull Class<T> clazz) {
        return jsonBody(url, body, null, clazz);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @NotNull Class<T> clazz) {
        return jsonBody(url, body, queryParams, null, clazz);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return jsonBody(url, body, queryParams, headers, null, clazz);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return JsonBodyHttpUtil.execute(url, body, queryParams, headers, options, clazz);
    }


    public static <T> T jsonBody(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return jsonBody(url, null, typeRef);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @NotNull TypeRef<T> typeRef) {
        return jsonBody(url, body, null, typeRef);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @NotNull TypeRef<T> typeRef) {
        return jsonBody(url, body, queryParams, null, typeRef);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return jsonBody(url, body, queryParams, headers, null, typeRef);
    }

    public static <T> T jsonBody(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryParams,
                                 @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return JsonBodyHttpUtil.execute(url, body, queryParams, headers, options, typeRef);
    }

    // endregion


}


/**
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class BinaryHttpUtil {

    // region BinaryBody POST

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url) {
        return execute(url, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 响应内容编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding) {
        return execute(url, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 响应内容编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, (String) null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url     请求地址
     * @param content body内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content) {
        return execute(url, content, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          body内容
     * @param responseEncoding 响应内容编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @Nullable Charset responseEncoding) {
        return execute(url, content, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    body内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, content, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          body内容
     * @param responseEncoding 响应内容编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, content, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param content  body内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap) {
        return execute(url, content, queryMap, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          body内容
     * @param queryMap         URL参数
     * @param responseEncoding 响应内容编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding) {
        return execute(url, content, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    body内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, content, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          body内容
     * @param queryMap         URL参数
     * @param responseEncoding 响应内容编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, content, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url       请求地址
     * @param content   body内容
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          body内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 响应内容编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    body内容
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, content, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          body内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 响应内容编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        InputStream in = null;
        if (content != null) {
            in = new ByteArrayInputStream(content.getBytes(CharsetUtil.UTF_8));
        }
        return execute(url, ContentType.DEFAULT_BINARY, in, queryMap, headers, bodyMethod, responseEncoding);
    }


    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url     请求地址
     * @param content 文件
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content) {
        return execute(url, content, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          文件
     * @param responseEncoding 响应内容编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, @Nullable Charset responseEncoding) {
        return execute(url, content, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    文件
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, content, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          文件
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, content, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param content  文件
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap) {
        return execute(url, content, queryMap, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          文件
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding) {
        return execute(url, content, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    文件
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, content, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          文件
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, content, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url       请求地址
     * @param content   文件
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          文件
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    文件
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, content, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          文件
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        FileInputStream in = null;
        try {
            ContentType contentType = ContentType.DEFAULT_BINARY;
            if (content != null) {
                in = FileUtil.openFileInputStream(content);
                contentType = ContentType.parseByFileExt(FileUtil.getFileExt(content));
            }
            return execute(url, contentType, in, queryMap, headers, bodyMethod, responseEncoding);
        } finally {
            IOUtil.closeQuietly(in);
        }
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url     请求地址
     * @param content 输入流，不会自动关闭
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content) {
        return execute(url, contentType, content, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          输入流，不会自动关闭
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 @Nullable Charset responseEncoding) {
        return execute(url, contentType, content, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    输入流，不会自动关闭
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, contentType, content, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          输入流，不会自动关闭
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, contentType, content, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param content  输入流，不会自动关闭
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 Map<String, ?> queryMap) {
        return execute(url, contentType, content, queryMap, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          输入流，不会自动关闭
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding) {
        return execute(url, contentType, content, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    输入流，不会自动关闭
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 Map<String, ?> queryMap, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, contentType, content, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          输入流，不会自动关闭
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 @Nullable Map<String, ?> queryMap, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, contentType, content, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url       请求地址
     * @param content   输入流，不会自动关闭
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 Map<String, ?> queryMap, @Nullable HttpHeaders headers) {
        return execute(url, contentType, content, queryMap, headers, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          输入流，不会自动关闭
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                 @Nullable Charset responseEncoding) {
        return execute(url, contentType, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param content    输入流，不会自动关闭
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, contentType, content, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param content          输入流，不会自动关闭
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                 @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        HttpClient httpClient = Factory.get().build(null);

        HttpRequestBody requestBody = null;
        if (content != null) {
            requestBody = HttpRequestBody.create(contentType, content);
        }

        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryMap)
                .headers(headers)
                .method(bodyMethod.toHttpMethod())
                .body(requestBody)
                .build();
        HttpResponse httpResponse = httpClient.execute(httpRequest, null);
        httpResponse.checkStatus();
        return httpResponse.body().string(responseEncoding);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param bodyMethod       HTTP请求方式
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, (String) null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param content Body内容
     * @param clazz   类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @NotNull Class<T> clazz) {
        return execute(url, content, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, content, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    Body内容
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @NotNull Class<T> clazz,
                                @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, content, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param bodyMethod       HTTP请求方式
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, content, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param content  Body内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    Body内容
     * @param queryMap   URL参数
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param bodyMethod       HTTP请求方式
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url       请求地址
     * @param content   Body内容
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param clazz     类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, headers, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    Body内容
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, headers, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param bodyMethod       HTTP请求方式
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        InputStream in = null;
        ContentType contentType = ContentType.DEFAULT_BINARY;
        try {
            if (content != null) {
                in = new ByteArrayInputStream(content.getBytes(CharsetUtil.UTF_8));
            }
            return execute(url, contentType, in, queryMap, headers, bodyMethod, responseEncoding, clazz);
        } finally {
            IOUtil.closeQuietly(in);
        }
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param content Body内容
     * @param clazz   类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @NotNull Class<T> clazz) {
        return execute(url, content, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, content, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    Body内容
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull Class<T> clazz) {
        return execute(url, content, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, content, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param content  Body内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    Body内容
     * @param queryMap   URL参数
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param bodyMethod       HTTP请求方式
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url       请求地址
     * @param content   Body内容
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param clazz     类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    Body内容
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, headers, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }


    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          Body内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param bodyMethod       HTTP请求方式
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        FileInputStream in = null;
        ContentType contentType = ContentType.DEFAULT_BINARY;
        try {
            if (content != null) {
                in = FileUtil.openFileInputStream(content);
                contentType = ContentType.parseByFileExt(FileUtil.getFileExt(content));
            }
            return execute(url, contentType, in, queryMap, headers, bodyMethod, responseEncoding, clazz);
        } finally {
            IOUtil.closeQuietly(in);
        }
    }


    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param content BODY输入流，不会自动关闭流
     * @param clazz   类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @NotNull Class<T> clazz) {
        return execute(url, contentType, content, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param bodyMethod       HTTP请求方式
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param content  BODY输入流，不会自动关闭流
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                Map<String, ?> queryMap, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, queryMap, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param clazz      类型
     * @param bodyMethod HTTP请求方式
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                Map<String, ?> queryMap, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, queryMap, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url       请求地址
     * @param content   BODY输入流，不会自动关闭流
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param clazz     类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                Map<String, ?> queryMap, @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, queryMap, headers, (Charset) null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, contentType, content, queryMap, headers, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param clazz            类型
     * @param responseEncoding 指定响应内容的编码
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        String text = execute(url, contentType, content, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }


    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return execute(url, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, (String) null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param content BODY输入流，不会自动关闭流
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param content  BODY输入流，不会自动关闭流
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url       请求地址
     * @param content   BODY输入流，不会自动关闭流
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param typeRef   类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, headers, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable String content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        InputStream in = null;
        try {
            if (content != null) {
                in = new ByteArrayInputStream(content.getBytes(CharsetUtil.UTF_8));
            }
            return execute(url, ContentType.DEFAULT_BINARY, in, queryMap, headers, bodyMethod, responseEncoding, typeRef);
        } finally {
            IOUtil.closeQuietly(in);
        }
    }


    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param content BODY输入流，不会自动关闭流
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, (Map<String, ?>) null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param content  BODY输入流，不会自动关闭流
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url       请求地址
     * @param content   BODY输入流，不会自动关闭流
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param typeRef   类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, headers, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable File content, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        FileInputStream in = null;
        ContentType contentType = null;
        try {
            if (content != null) {
                in = FileUtil.openFileInputStream(content);
                //TODO 获取文件的ContentType
                contentType = ContentType.parseByFileExt(FileUtil.getFileExt(content));
            }
            return execute(url, contentType, in, queryMap, headers, bodyMethod, responseEncoding, typeRef);
        } finally {
            IOUtil.closeQuietly(in);
        }
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param content BODY输入流，不会自动关闭流
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, (Charset) null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param content  BODY输入流，不会自动关闭流
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                Map<String, ?> queryMap, @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, queryMap, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                Map<String, ?> queryMap, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, queryMap, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url       请求地址
     * @param content   BODY输入流，不会自动关闭流
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param typeRef   类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param content    BODY输入流，不会自动关闭流
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, queryMap, headers, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, contentType, content, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(binary body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param content          BODY输入流，不会自动关闭流
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable ContentType contentType, @Nullable InputStream content,
                                @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        String text = execute(url, contentType, content, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, typeRef);
    }


    // endregion

}

/**
 * 文件下载
 *
 * @author miles.tang at 2021-02-25
 * @since 1.0
 */
public class DownloadHttpUtil {

    /**
     * 返回字节流，必须
     *
     * @param url            地址
     * @param queryParams    参数
     * @param requestHeaders 请求头
     * @return 结果
     */
    public static HttpResponse executeForResponse(@NotNull String url, @Nullable Map<String, ?> queryParams,
                                                  @Nullable HttpHeaders requestHeaders) {
        HttpClient httpClient = Factory.get().build(null);
        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryParams)
                .headers(requestHeaders)
                .build();
        return httpClient.execute(httpRequest, null);
    }

    /**
     * 返回字节流，必须
     *
     * @param url         地址
     * @param queryParams 参数
     * @return 结果
     */
    public static HttpResponse executeForResponse(@NotNull String url, @Nullable Map<String, ?> queryParams) {
        return executeForResponse(url, queryParams, null);
    }

    public static File writeTo(@NotNull String url, @NotNull File destFile) {
        return writeTo(url, destFile, false);
    }

    public static File writeTo(@NotNull String url, @Nullable Map<String, ?> queryParams, @NotNull File destFile) {
        return writeTo(url, queryParams, destFile, false);
    }

    public static File writeTo(@NotNull String url, @NotNull File destFile, boolean replace) {
        return writeTo(url, null, destFile, replace);
    }

    public static File writeTo(@NotNull String url, @Nullable Map<String, ?> queryParams, @NotNull File destFile, boolean replace) {
        HttpResponse httpResponse = executeForResponse(url, queryParams);
        httpResponse.checkStatus();
        HttpResponseBody responseBody = httpResponse.body();
        File target;
        if (destFile.isDirectory()) {
            String filename = Utils.expandFilenameFromContentDisposition(httpResponse.headers());
            if (StringUtil.isEmpty(filename)) {
                filename = "Chillies-Download";
            }
            target = new File(destFile, filename);
        } else {
            target = destFile;
        }
        if (replace) {
            FileUtil.delete(target);
        } else {
            if (target.exists()) {
                target = getNewFilename(target, 1);
            }
        }
        // 开始写入内容
        try {
            FileUtil.copyStream(responseBody.byteStream(), target);
        } finally {
            IOUtil.closeQuietly(httpResponse);
        }
        return target;
    }

    private static File getNewFilename(File file, int index) {
        String mainName = FileUtil.mainName(file);
        String fileExt = FileUtil.getFileExt(file);
        if (fileExt == null) {
            fileExt = StringUtil.EMPTY_STRING;
        } else {
            fileExt += StringUtil.DOT;
        }
        File target = new File(file.getParentFile(), mainName + "(" + index + ")" + fileExt);
        if (target.exists()) {
            return getNewFilename(file, index + 1);
        }
        return target;
    }

    public static void writeTo(@NotNull String url, @NotNull OutputStream out) {
        writeTo(url, null, out);
    }

    public static void writeTo(@NotNull String url, @Nullable Map<String, ?> queryParams, @NotNull OutputStream out) {
        HttpResponse httpResponse = executeForResponse(url, queryParams);
        try {
            httpResponse.checkStatus();
            IOUtil.copy(httpResponse.body().byteStream(), out);
        } finally {
            IOUtil.closeQuietly(httpResponse);
        }
    }

    public static byte[] binary(@NotNull String url) {
        return binary(url, null);
    }

    public static byte[] binary(@NotNull String url, @Nullable Map<String, ?> queryParams) {
        return binary(url, queryParams, null);
    }

    public static byte[] binary(@NotNull String url, @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers) {
        HttpResponse httpResponse = executeForResponse(url, queryParams, headers);
        try {
            httpResponse.checkStatus();
            return IOUtil.readBytes(httpResponse.body().byteStream());
        } finally {
            IOUtil.closeQuietly(httpResponse);
        }
    }

}

/**
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class FormDataHttpUtil {

    // region form-data POST

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String post(@NotNull String url) {
        return post(url, (Charset) null);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Charset responseEncoding) {
        return post(url, null, responseEncoding);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param postParams POST参数
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams) {
        return post(url, postParams, (Map<String, ?>) null);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param postParams POST参数
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable HttpOptions options) {
        return post(url, postParams, (Map<String, ?>) null, options);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Charset responseEncoding) {
        return post(url, postParams, null, responseEncoding);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams,
                              @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return post(url, postParams, (Map<String, ?>) null, responseEncoding, options);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams) {
        return post(url, postParams, queryParams, (HttpOptions) null);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams,
                              @Nullable Map<String, ?> queryParams, @Nullable HttpOptions options) {
        return post(url, postParams, queryParams, (HttpHeaders) null, options);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams,
                              @Nullable Map<String, ?> queryParams, @Nullable Charset responseEncoding) {
        return post(url, postParams, queryParams, null, responseEncoding);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams,
                              @Nullable Map<String, ?> queryParams, @Nullable Charset responseEncoding,
                              @Nullable HttpOptions options) {
        return post(url, postParams, queryParams, null, responseEncoding, options);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param headers     HTTP头参数
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                              @Nullable HttpHeaders headers) {
        return post(url, postParams, queryParams, headers, (Charset) null);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param headers     HTTP头参数
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                              @Nullable HttpHeaders headers, @Nullable HttpOptions options) {
        return post(url, postParams, queryParams, headers, null, options);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams,
                              @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                              @Nullable Charset responseEncoding) {
        return post(url, postParams, queryParams, headers, responseEncoding, (HttpOptions) null);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String post(@NotNull String url, @Nullable Map<String, ?> postParams,
                              @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                              @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        HttpResponse httpResponse = execute(url, postParams, queryParams, headers, options);
        httpResponse.checkStatus();
        return httpResponse.body().string(responseEncoding);
    }

    /**
     * 判断是不是FormData
     *
     * @param postParams POST参数
     * @return {@code true}/{@code false}
     */
    public static boolean isFormData(Map<String, ?> postParams) {
        Object value;
        for (Map.Entry<String, ?> entry : postParams.entrySet()) {
            value = entry.getValue();
            if (entry.getKey() != null && value != null) {
                if (value instanceof File) {
                    return true;
                } else if (value instanceof InputStream) {
                    throw new HttpClientException("请使用 InputStreamMultipart 包装输入流");
                } else if (value instanceof HttpMultipartBody.Part) {
                    return true;
                } else if (value instanceof InputStreamMultipart) {
                    return true;
                } else if (value instanceof Collection<?>) {
                    for (Object obj : (Collection<?>) value) {
                        if (obj != null) {
                            if (obj instanceof File) {
                                return true;
                            } else if (obj instanceof InputStream) {
                                throw new HttpClientException("请使用 InputStreamMultipart 包装输入流");
                            } else if (obj instanceof HttpMultipartBody.Part) {
                                return true;
                            } else if (obj instanceof InputStreamMultipart) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }


    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @NotNull Class<T> clazz) {
        return post(url, (Charset) null, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return post(url, null, responseEncoding, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param postParams POST参数
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @NotNull Class<T> clazz) {
        return post(url, postParams, (Charset) null, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param postParams POST参数
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable HttpOptions options,
                             @NotNull Class<T> clazz) {
        return post(url, postParams, (Charset) null, options, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return post(url, postParams, null, responseEncoding, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return post(url, postParams, null, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param clazz       类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, (Charset) null, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param clazz       类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, (Charset) null, options, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable Charset responseEncoding,
                             @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, null, responseEncoding, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable Charset responseEncoding,
                             @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, null, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param headers     HTTP头参数
     * @param clazz       类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, headers, (Charset) null, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param headers     HTTP头参数
     * @param clazz       类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return post(url, postParams, queryParams, headers, null, options, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                             @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        String response = post(url, postParams, queryParams, headers, responseEncoding, (HttpOptions) null);
        return (StringUtil.isEmpty(response)) ? null : JSONUtil.fromJson(response, clazz);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                             @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        String response = post(url, postParams, queryParams, headers, responseEncoding, options);
        return (StringUtil.isEmpty(response)) ? null : JSONUtil.fromJson(response, clazz);
    }


    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return post(url, (Charset) null, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return post(url, null, responseEncoding, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param postParams POST参数
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, (Map<String, ?>) null, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param postParams POST参数
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable HttpOptions options,
                             @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, (Map<String, ?>) null, options, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, null, responseEncoding, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Charset responseEncoding, @Nullable HttpOptions options,
                             @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, null, responseEncoding, options, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param typeRef     类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, (HttpHeaders) null, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param typeRef     类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, (HttpHeaders) null, options, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, null, responseEncoding, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param options          HTTP配置
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, null, responseEncoding, options, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param headers     HTTP头参数
     * @param typeRef     类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, headers, (HttpOptions) null, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param headers     HTTP头参数
     * @param options     HTTP配置
     * @param typeRef     类型
     * @param <T>         泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams,
                             @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, headers, null, options, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                             @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return post(url, postParams, queryParams, headers, responseEncoding, null, typeRef);
    }

    /**
     * 发起POST(form-data)请求，即表单请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param postParams       POST参数
     * @param queryParams      URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param options          HTTP配置
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T post(@NotNull String url, @Nullable Map<String, ?> postParams,
                             @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                             @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        String response = post(url, postParams, queryParams, headers, responseEncoding, options);
        return (StringUtil.isEmpty(response)) ? null : JSONUtil.fromJson(response, typeRef);
    }

    /**
     * 发送POST请求，对响应结果不处理
     *
     * @param url        请求地址
     * @param postParams POST参数
     * @return {@linkplain HttpResponse}
     */
    public static HttpResponse execute(@NotNull String url, @Nullable Map<String, ?> postParams) {
        return execute(url, postParams, null);
    }

    /**
     * 发送POST请求，对响应结果不处理
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @return {@linkplain HttpResponse}
     */
    public static HttpResponse execute(@NotNull String url, @Nullable Map<String, ?> postParams, @Nullable Map<String, ?> queryParams) {
        return execute(url, postParams, queryParams, null, null);
    }

    /**
     * 发送POST请求，对响应结果不处理
     *
     * @param url         请求地址
     * @param postParams  POST参数
     * @param queryParams URL参数
     * @param headers     HTTP请求头参数
     * @param options     选项
     * @return {@linkplain HttpResponse}
     */
    public static HttpResponse execute(@NotNull String url, @Nullable Map<String, ?> postParams,
                                       @Nullable Map<String, ?> queryParams, @Nullable HttpHeaders headers,
                                       @Nullable HttpOptions options) {
        HttpClient httpClient = Factory.get().build(options);

        HttpRequestBody httpRequestBody = null;
        if (CollectionUtil.isNotEmpty(postParams)) {
            if (isFormData(postParams)) {
                httpRequestBody = buildHttpMultipartBody(postParams);
            } else {
                httpRequestBody = buildHttpFormBody(postParams);
            }
        }

        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryParams)
                .headers(headers)
                .method(HttpMethod.POST)
                .body(httpRequestBody)
                .build();
        return httpClient.execute(httpRequest, null);
    }

    private static HttpMultipartBody buildHttpMultipartBody(Map<String, ?> postParams) {
        HttpMultipartBody.Builder builder = HttpMultipartBody.builder();
        String name;
        Object value;
        for (Map.Entry<String, ?> entry : postParams.entrySet()) {
            name = entry.getKey();
            value = entry.getValue();
            if (name != null && value != null) {
                if (value instanceof Collection<?>) {
                    for (Object obj : (Collection<?>) value) {
                        formAppend(name, obj, builder);
                    }
                } else {
                    formAppend(name, value, builder);
                }
            }
        }
        return builder.build();
    }

    private static void formAppend(String formName, Object obj, HttpMultipartBody.Builder builder) {
        if (obj != null) {
            if (obj instanceof File) {
                builder.add(formName, (File) obj);
            } else if (obj instanceof InputStreamMultipart) {
                InputStreamMultipart ism = (InputStreamMultipart) obj;
                builder.add(HttpMultipartBody.Part.create(formName, ism.getFilename(), ism.getIn()));
            } else if (obj instanceof HttpMultipartBody.Part) {
                builder.add((HttpMultipartBody.Part) obj);
            } else {
                builder.add(formName, obj.toString());
            }
        }
    }

    private static HttpFormBody buildHttpFormBody(Map<String, ?> postParams) {
        HttpFormBody.Builder builder = HttpFormBody.builder();
        Object value;
        for (Map.Entry<String, ?> entry : postParams.entrySet()) {
            value = entry.getValue();
            if (entry.getKey() != null && value != null) {
                if (value instanceof Collection<?>) {
                    for (Object obj : (Collection<?>) value) {
                        if (obj != null) {
                            builder.add(entry.getKey(), obj.toString());
                        }
                    }
                } else {
                    builder.add(entry.getKey(), value.toString());
                }
            }
        }
        return builder.build();
    }

    // endregion

}

/**
 * HTTP Get请求封装工具类
 *
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class GetHttpUtil {

    // region GET 请求

    /**
     * 发起GET请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应内容
     */
    public static String execute(@NotNull String url) {
        return execute(url, (Charset) null);
    }

    /**
     * 发起GET请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应内容
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding) {
        return execute(url, null, responseEncoding);
    }

    /**
     * 发起GET请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @return 响应内容
     */
    public static String execute(@NotNull String url, @Nullable Map<String, ?> queryMap) {
        return execute(url, queryMap, (Charset) null);
    }

    /**
     * 发起GET请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应内容
     */
    public static String execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding) {
        return execute(url, queryMap, null, responseEncoding);
    }

    /**
     * 发起GET请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @return 响应内容
     */
    public static String execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers) {
        return execute(url, queryMap, headers, (Charset) null);
    }

    /**
     * 发起GET请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应内容
     */
    public static String execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                 @Nullable Charset responseEncoding) {
        return execute(url, queryMap, headers, responseEncoding, (HttpOptions) null);
    }

    /**
     * 发起GET请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应内容
     */
    public static String execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        HttpClient httpClient = Factory.get().build(options);
        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryMap)
                .headers(headers)
                .build();
        HttpResponse httpResponse = httpClient.execute(httpRequest, null);
        httpResponse.checkStatus();
        return httpResponse.body().string(responseEncoding);
    }


    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, null, null, responseEncoding, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @NotNull Class<T> clazz) {
        return execute(url, queryMap, (Charset) null, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap,@Nullable HttpOptions options,
                                @NotNull Class<T> clazz) {
        return execute(url, queryMap, (Charset) null, options, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, queryMap, null, responseEncoding, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, queryMap, null, responseEncoding, options, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @NotNull Class<T> clazz) {
        return execute(url, queryMap, headers, (HttpOptions) null, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, queryMap, headers, null, options, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable Charset responseEncoding, Class<T> clazz) {
        return execute(url, queryMap, headers, responseEncoding, null, clazz);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              模板实际类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, Class<T> clazz) {
        String response = execute(url, queryMap, headers, responseEncoding, options);
        return (StringUtil.isEmpty(response)) ? null : JSONUtil.fromJson(response, clazz);
    }


    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param typeRef 泛型类型包装类
     * @param <T>     目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return execute(url, (Charset) null, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          泛型类型包装类
     * @param <T>              目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, null, responseEncoding, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param typeRef  泛型类型包装类
     * @param <T>      目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @NotNull TypeRef<T> typeRef) {
        return execute(url, queryMap, (HttpHeaders) null, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param typeRef  泛型类型包装类
     * @param <T>      目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpOptions options,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, queryMap, (HttpHeaders) null, options, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          泛型类型包装类
     * @param <T>              目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, queryMap, null, responseEncoding, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          泛型类型包装类
     * @param <T>              目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, queryMap, null, responseEncoding, options, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  泛型类型包装类
     * @param <T>      目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, queryMap, headers, (HttpOptions) null, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  泛型类型包装类
     * @param <T>      目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, queryMap, headers, null, options, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          泛型类型包装类
     * @param <T>              目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        String response = execute(url, queryMap, headers, responseEncoding);
        return (StringUtil.isEmpty(response)) ? null : JSONUtil.fromJson(response, typeRef);
    }

    /**
     * 发起GET请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          泛型类型包装类
     * @param <T>              目标类型
     * @return 响应内容
     */
    public static <T> T execute(@NotNull String url, @Nullable Map<String, ?> queryMap, @Nullable HttpHeaders headers,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        String response = execute(url, queryMap, headers, responseEncoding, options);
        return (StringUtil.isEmpty(response)) ? null : JSONUtil.fromJson(response, typeRef);
    }

    // endregion

}

/**
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class HtmlBodyHttpUtil {

    // region HTML RawBody POST

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url) {
        return execute(url, (Charset) null);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding) {
        return execute(url, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body) {
        return execute(url, body, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, bodyMethod, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap) {
        return execute(url, body, queryMap, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        HttpClient httpClient = Factory.get().build(null);

        HttpRequestBody requestBody = null;
        if (body != null) {
            if (body instanceof String) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_HTML, (String) body);
            } else if (body instanceof InputStream) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_HTML, (InputStream) body);
            } else if (body instanceof File) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_HTML, (File) body);
            } else {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_HTML, JSONUtil.toJson(body));
            }
        }

        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryMap)
                .headers(headers)
                .method(bodyMethod.toHttpMethod())
                .body(requestBody)
                .build();
        HttpResponse httpResponse = httpClient.execute(httpRequest, null);
        httpResponse.checkStatus();
        return httpResponse.body().string(responseEncoding);
    }


    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, null, responseEncoding, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param body  BODY内容
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull Class<T> clazz) {
        return execute(url, body, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }


    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return execute(url, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, null, bodyMethod, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param body    BODY内容
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, null, bodyMethod, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(HTML Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, typeRef);
    }

    // endregion

}

/**
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class JsBodyHttpUtil {

    // region Javascript RawBody POST

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url) {
        return execute(url, (Charset) null);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding) {
        return execute(url, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, bodyMethod, (Map<String, ?>) null);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body) {
        return execute(url, body, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                           @Nullable Charset responseEncoding) {
        return execute(url, body, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap) {
        return execute(url, body, queryMap, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                           @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                           @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                           @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url       请求地址
     * @param body      BODY内容
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                           @Nullable HttpHeaders headers) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                           @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                           @Nullable HttpHeaders headers, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                           @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                           @Nullable Charset responseEncoding) {
        HttpClient httpClient = Factory.get().build(null);

        HttpRequestBody requestBody = null;
        if (body != null) {
            if (body instanceof String) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JAVASCRIPT, (String) body);
            } else if (body instanceof InputStream) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JAVASCRIPT, (InputStream) body);
            } else if (body instanceof File) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JAVASCRIPT, (File) body);
            } else {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JAVASCRIPT, JSONUtil.toJson(body));
            }
        }

        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryMap)
                .headers(headers)
                .method(bodyMethod.toHttpMethod())
                .body(requestBody)
                .build();
        HttpResponse httpResponse = httpClient.execute(httpRequest, null);
        httpResponse.checkStatus();
        return httpResponse.body().string(responseEncoding);
    }


    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, null, bodyMethod, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param body  BODY内容
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                          @NotNull Class<T> clazz) {
        return execute(url, body, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                          @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                          @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                          @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url       请求地址
     * @param body      BODY内容
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param clazz     类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                          @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                          @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                          @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }


    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return execute(url, (Charset) null, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, null, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param body    BODY内容
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                          @NotNull TypeRef<T> typeRef) {
        return execute(url, body, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                          @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                          @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                          @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url       请求地址
     * @param body      BODY内容
     * @param queryMap  URL参数
     * @param headers HTTP头参数
     * @param typeRef   类型
     * @param <T>       泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers  HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                          @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                          @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JavaScript Rawbody)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers        HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                          @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                          @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, typeRef);
    }

    // endregion

}

/**
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class JsonBodyHttpUtil {

    // region JSON RawBody POST

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url) {
        return execute(url, (Charset) null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable HttpOptions options) {
        return execute(url, (Charset) null, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding) {
        return execute(url, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @Nullable HttpOptions options) {
        return execute(url, bodyMethod, (Charset) null, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body) {
        return execute(url, body, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable HttpOptions options) {
        return execute(url, body, HttpBodyMethod.POST, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable HttpOptions options) {
        return execute(url, body, bodyMethod, (Charset) null, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                 @Nullable HttpOptions options) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return execute(url, body, null, bodyMethod, responseEncoding, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap) {
        return execute(url, body, queryMap, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable HttpOptions options) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable HttpOptions options) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, options);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, headers, bodyMethod, responseEncoding, (HttpOptions) null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        HttpResponse httpResponse = executeForResponse(url, body, queryMap, headers, bodyMethod, options);
        httpResponse.checkStatus();
        return httpResponse.body().string(responseEncoding);
    }


    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @Nullable HttpOptions options,
                                @NotNull Class<T> clazz) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, null, bodyMethod, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, null, bodyMethod, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param body  BODY内容
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url   请求地址
     * @param body  BODY内容
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull Class<T> clazz) {
        return execute(url, body, bodyMethod, (HttpOptions) null, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, bodyMethod, null, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, null, bodyMethod, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, bodyMethod, (HttpOptions) null, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable HttpOptions options,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, bodyMethod, null, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, bodyMethod, (HttpOptions) null, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, bodyMethod, null, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding, options);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }


    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return execute(url, (Charset) null, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, null, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param body    BODY内容
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, options, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, null, null, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable HttpOptions httpOptions, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, null, httpOptions, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions httpOptions, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, httpOptions, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, responseEncoding, null, typeRef);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param httpOptions      选项
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions httpOptions,
                                @NotNull TypeRef<T> typeRef) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding, httpOptions);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, typeRef);
    }

    // endregion

    // region Original

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static HttpResponse executeForResponse(@NotNull String url) {
        return executeForResponse(url, null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static HttpResponse executeForResponse(@NotNull String url, @Nullable Object body) {
        return executeForResponse(url, body, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static HttpResponse executeForResponse(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod) {
        return executeForResponse(url, body, null, bodyMethod);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static HttpResponse executeForResponse(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap) {
        return executeForResponse(url, body, queryMap, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static HttpResponse executeForResponse(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                                  @NotNull HttpBodyMethod bodyMethod) {
        return executeForResponse(url, body, queryMap, null, bodyMethod, null);
    }

    /**
     * 发起POST(JSON Raw Body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static HttpResponse executeForResponse(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                                  @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                                  @Nullable HttpOptions options) {
        HttpClient httpClient = Factory.get().build(options);

        HttpRequestBody requestBody = null;
        if (body != null) {
            if (body instanceof String) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JSON, (String) body);
            } else if (body instanceof InputStream) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JSON, (InputStream) body);
            } else if (body instanceof File) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JSON, (File) body);
            } else {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_JSON, JSONUtil.toJson(body));
            }
        }

        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryMap)
                .headers(headers)
                .method(bodyMethod.toHttpMethod())
                .body(requestBody)
                .build();
        return httpClient.execute(httpRequest, null);
    }

    // endregion

}

/**
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class TextBodyHttpUtil {

    // region Text RawBody POST

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url) {
        return execute(url, (Charset) null);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable HttpOptions options) {
        return execute(url, (Charset) null, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding) {
        return execute(url, responseEncoding, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return execute(url, responseEncoding, HttpBodyMethod.POST, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, (Charset) null, bodyMethod);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @Nullable HttpOptions options) {
        return execute(url, (Charset) null, bodyMethod, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param bodyMethod       HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return execute(url, null, bodyMethod, responseEncoding, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body) {
        return execute(url, body, (Charset) null);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable HttpOptions options) {
        return execute(url, body, (Charset) null, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                 @Nullable HttpOptions options) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable HttpOptions options) {
        return execute(url, body, bodyMethod, (Charset) null, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return execute(url, body, null, bodyMethod, responseEncoding, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap) {
        return execute(url, body, queryMap, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable HttpOptions options) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable HttpOptions options) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                 @Nullable HttpOptions options) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, options);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, headers, bodyMethod, responseEncoding, (HttpOptions) null);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding, @Nullable HttpOptions options) {
        HttpClient httpClient = Factory.get().build(options);

        HttpRequestBody requestBody = null;
        if (body != null) {
            if (body instanceof String) {
                requestBody = HttpRequestBody.create(ContentType.DEFAULT_TEXT, (String) body);
            } else if (body instanceof InputStream) {
                requestBody = HttpRequestBody.create(ContentType.DEFAULT_TEXT, (InputStream) body);
            } else if (body instanceof File) {
                requestBody = HttpRequestBody.create(ContentType.DEFAULT_TEXT, (File) body);
            } else {
                requestBody = HttpRequestBody.create(ContentType.DEFAULT_TEXT, JSONUtil.toJson(body));
            }
        }

        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryMap)
                .headers(headers)
                .method(bodyMethod.toHttpMethod())
                .body(requestBody)
                .build();
        HttpResponse httpResponse = httpClient.execute(httpRequest, null);
        httpResponse.checkStatus();
        return httpResponse.body().string(responseEncoding);
    }


    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url   请求地址
     * @param body  BODY内容
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull Class<T> clazz) {
        return execute(url, body, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(text raw body)请求，即表单请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, options, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, bodyMethod, null, options, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding, @Nullable HttpOptions options,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, options, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull Class<T> clazz) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding, options);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }


    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return execute(url, (Charset) null, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url     请求地址
     * @param body    BODY内容
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, bodyMethod, null, options, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, options, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, options, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, options, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, null, options, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, options, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, responseEncoding, null, typeRef);
    }

    /**
     * 发起POST(Text Raw Body)请求，并将响应结果转为JavaBean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @Nullable HttpOptions options, @NotNull TypeRef<T> typeRef) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding, options);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, typeRef);
    }

    // endregion

}

/**
 * @author miles.tang at 2021-02-07
 * @since 1.0
 */
public class XmlBodyHttpUtil {

    // region XML RawBody POST

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url 请求地址
     * @return 响应结果
     */
    public static String execute(@NotNull String url) {
        return execute(url, (Charset) null);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Charset responseEncoding) {
        return execute(url, null, responseEncoding);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, null, bodyMethod);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url  请求地址
     * @param body BODY内容
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body) {
        return execute(url, body, (Map<String, ?>) null);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap) {
        return execute(url, body, queryMap, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod) {
        return execute(url, body, queryMap, headers, bodyMethod, (Charset) null);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @Nullable Charset responseEncoding) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为字符串
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @return 响应结果
     */
    public static String execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                 @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                 @Nullable Charset responseEncoding) {
        HttpClient httpClient = Factory.get().build(null);

        HttpRequestBody requestBody = null;
        if (body != null) {
            if (body instanceof String) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_XML, (String) body);
            } else if (body instanceof InputStream) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_XML, (InputStream) body);
            } else if (body instanceof File) {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_XML, (File) body);
            } else {
                requestBody = HttpRequestBody.create(ContentType.APPLICATION_XML, JSONUtil.toJson(body));
            }
        }

        HttpRequest httpRequest = HttpRequest.builder()
                .url(url)
                .queryParams(queryMap)
                .headers(headers)
                .method(bodyMethod.toHttpMethod())
                .body(requestBody)
                .build();
        HttpResponse httpResponse = httpClient.execute(httpRequest, null);
        httpResponse.checkStatus();
        HttpResponseBody httpResponseBody = httpResponse.body();
        return httpResponseBody.string(responseEncoding);
    }


    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url   请求地址
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull Class<T> clazz) {
        return execute(url, (Charset) null, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, bodyMethod, (Charset) null, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url   请求地址
     * @param body  BODY内容
     * @param clazz 类型
     * @param <T>   泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull Class<T> clazz) {
        return execute(url, body, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param clazz    类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param clazz      类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod, @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, bodyMethod, null, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull Class<T> clazz) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, clazz);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param clazz            类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull Class<T> clazz) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, clazz);
    }


    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull TypeRef<T> typeRef) {
        return execute(url, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, null, bodyMethod, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url     请求地址
     * @param body    BODY内容
     * @param typeRef 类型
     * @param <T>     泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, bodyMethod, (Charset) null, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @NotNull HttpBodyMethod bodyMethod, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, null, bodyMethod, responseEncoding, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url      请求地址
     * @param body     BODY内容
     * @param queryMap URL参数
     * @param headers  HTTP头参数
     * @param typeRef  类型
     * @param <T>      泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url        请求地址
     * @param body       BODY内容
     * @param queryMap   URL参数
     * @param headers    HTTP头参数
     * @param bodyMethod HTTP请求方式
     * @param typeRef    类型
     * @param <T>        泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, bodyMethod, null, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @Nullable Charset responseEncoding,
                                @NotNull TypeRef<T> typeRef) {
        return execute(url, body, queryMap, headers, HttpBodyMethod.POST, responseEncoding, typeRef);
    }

    /**
     * 发起POST(xml raw body)请求，并将响应结果转为Bean对象
     *
     * @param url              请求地址
     * @param body             BODY内容
     * @param queryMap         URL参数
     * @param headers          HTTP头参数
     * @param bodyMethod       HTTP请求方式
     * @param responseEncoding 指定响应内容的编码
     * @param typeRef          类型
     * @param <T>              泛型类型
     * @return 响应结果
     */
    public static <T> T execute(@NotNull String url, @Nullable Object body, @Nullable Map<String, ?> queryMap,
                                @Nullable HttpHeaders headers, @NotNull HttpBodyMethod bodyMethod,
                                @Nullable Charset responseEncoding, @NotNull TypeRef<T> typeRef) {
        String text = execute(url, body, queryMap, headers, bodyMethod, responseEncoding);
        return StringUtil.isEmpty(text) ? null : JSONUtil.fromJson(text, typeRef);
    }

    // endregion

}

/**
 * 上传流包装
 *
 * @author miles.tang at 2021-03-10
 * @since 1.0
 */
public class InputStreamMultipart {

    private final InputStream in;

    private final String filename;

    public InputStreamMultipart(InputStream in, String filename) {
        this.in = in;
        this.filename = filename;
    }

    public InputStreamMultipart(byte[] data, String filename) {
        this.in = new ByteArrayInputStream(data);
        this.filename = filename;
    }

    public InputStreamMultipart(File file) {
        this.in = FileUtil.openFileInputStream(file);
        this.filename = file.getName();
    }

    public InputStreamMultipart(File file, String filename) {
        this.in = FileUtil.openFileInputStream(file);
        this.filename = filename;
    }

    public InputStream getIn() {
        return in;
    }

    public String getFilename() {
        return filename;
    }

}


